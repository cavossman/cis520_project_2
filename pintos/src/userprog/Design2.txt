		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Nolan Casimir
Alex Hamilton
Dalton Graber

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://github.com/ryantimwilson/Pintos-Project-2


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We did not have to add any structs, global/static variables, or typedefs for this part of the project

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Our implementation is in the setup_stack function in process.c. We start by initializing the stack
pointer as PHYS_BASE - 24. We also setup variables int argv_offsets[], which will keep track of each
argument, and argc which keeps track of the argument count. After that we loop through the file string
using strtok_r, and save each token in an array of arguments. Now we start copying stuff on to the stack.
First, we decrement the stack pointer by the length of the string (plus a null terminator) and copy the
entire file string on to that memory space using memcopy. We also make a pointer called start at this 
location. We then align the stack pointer by decrementing it by itself mod 4. We then decrement by the 
size of an int, and push 0 to the stack. We then loop the number of arguments and push each argument
onto the stack. After that we push a pointer to the arguments on the stack, push the number of arguments
to the stack, and finally we push a garbage return address (0xDEADBEEF) to the stack and we are done!

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() can be accessed by multiple threads at the same time, but strtok() cannot. strtok_r also has
an argument for save_ptr, which strtok does not have. Pintos does this because we do argument passing in 
the kernel and need to keep track of the save_ptr

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. Kernel is smaller
2. The shell can do advanced pre-processing

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We added the following lines to the thread struct in thread.h

    /* Project 2 Implementation */
    // NOTE: 'allelem' is used in our implementation in the limbo_list.
    // We can use this list_elem in both all_list and limbo_list b/c
    // these two lists are mutually exclussive
    int wait_cnt;                       /* Number of threads waiting on our completion */
    struct lock wait_lock;              /* wait_cnt needs to be atomic        */
    bool donezo;                        /* This process? It's DONESZO         */
    struct semaphore completion_sema;   /* Only upped once process is donezo  */
    int exit_status;                    /* Invalid until donezo == true       */
    int fd;                             /* File descriptor                    */
    struct list file_list;              /* Files in use by this thread v      */
    struct semaphore load_sema;         /* Only upped once process has loaded */
    bool load_success;                  /* Thread finished loading            */
    struct file * exe;                  /* Executable file                    */

We also added a struct called process file. This struct ///////////////////////////////////////////////////will finish 

	struct process_file
    {
    struct file* file;
    struct lock file_lock;
    int file_descriptor;
    struct list_elem elem;
    };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

---------- READING ----------
First we verify that we are not reading from stdout, and return -1 if we are. We then will check to
see if we are reading from stdin. If we are then we read through the lines in the buffer and return 
size. If we are not reading in from stdout or stdin then we aquire the file_lock, do some error
checking, call file_read, release the file lock, then return the return value of file_read 

---------- WRITING ----------
Write is very similar to read. First we verify that we are not writing to stdin, and return -1 if
we are. Then we check if we are writing to stdout. If we are, then we write the entire buffer to 
the console and return size. If we are in neither of these cases then we aquire the file_lock, do
some error checking, call file_write, release the file lock, and then return the return value
of file_write

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Every time that a page is allocated there has to be an inspection, so the minimum number is one. If we
inspected every byte then we would have 4096 inspections which would be the maximum. If we only copy
two bytes, the minimum is still one, but the maximum becomes 2 because we only have two bytes that we
can inspect.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We are calling a function we created called thread_wait_for_load in thread.c that will check
the value of the bool load_success that we added in the thread struct. This bool is set by the 
return value of the load function in process.c. If load fail then we will return -1 in
thread_wait_for_load.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change it.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was very hard, and I am ok with that, but it was also very time consuming. Being married,
having a job, being involved in other student organizations, and having other classes meant 
that the project took every minute of my free time and forced me to cut back time on a lot of 
other things that I value. In the future it would be nice if the projects were less time 
consuming, but I understand this class was not made to be easy. - Nolan

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

For me the argument passing taught me a lot about how the stack works - Nolan

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

More guidance on how to test to see if what we did is working would be nice. - Nolan

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Would be nice to talk a little bit about what we are doing in class - Nolan

>> Any other comments?
